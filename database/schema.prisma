datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

model Audit {
  id          String      @id @default(uuid()) @db.VarChar(36)
  auditable   String      @db.VarChar(30)
  auditableId String      @db.VarChar(36)
  changeCount Int         @default(0)
  previous    Json?
  incoming    Json?
  action      AuditAction
  username    String?     @db.VarChar(50)
  userId      String      @db.VarChar(36)
  createdAt     DateTime    @default(now())

  @@index([auditable, auditableId])
  @@index([userId])
  @@map("Audit")
}

enum WidgetType {
  BAR
  BUBBLE
  DOUGHNUT
  PIE
  GAUGE
  LINE
  POLAR
  RADAR
  SCATTER
  MAPS
}

model Dashboard {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  devices DashboardDevice[]
  widgets Widget[]

  @@map("Dashboard")
}

model Widget {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()

  dashboard   Dashboard  @relation(fields: [dashboardId], references: [id])
  dashboardId String     @db.VarChar(36)
  node        Json
  nodeId      String     @db.VarChar(50)
  widgetData  Json
  widgetType  WidgetType
  shiftData   Boolean?
  topic       Topic      @relation(fields: [topicId], references: [id])
  topicId     String     @db.VarChar(36)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("Widget")
}

model DashboardDevice {
  device      Device    @relation(fields: [deviceId], references: [id])
  deviceId    String    @db.VarChar(36)
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId String    @db.VarChar(36)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  @@id([deviceId, dashboardId])
  @@map("DashboardDevice")
}

model Device {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()

  deviceType   DeviceType @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId String     @db.VarChar(36)
  isActive     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  dashboards DashboardDevice[]
  topics     Topic[]

  @@map("Device")
}

model DeviceType {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  devices Device[]

  @@map("DeviceType")
}

model Topic {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()

  device     Device      @relation(fields: [deviceId], references: [id])
  deviceId   String      @db.VarChar(36)
  widgetType WidgetType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  topicEvents TopicEvent[]
  widgets     Widget[]

  @@map("Topic")
}

model TopicEvent {
  id              String  @id @default(uuid()) @db.VarChar(36)
  name            String  @unique @db.VarChar(50)
  description     String? @db.Text()
  topic           Topic   @relation(fields: [topicId], references: [id])
  topicId         String  @db.VarChar(36)
  eventExpression String?
  bodyEmail       String? @db.Text()
  htmlBodyEmail   String? @db.Text()

  notificationEmails NotificationEmailTopicEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("TopicEvent")
}

model NotificationEmailTopicEvent {
  notificationEmail   NotificationEmail @relation(fields: [notificationEmailId], references: [id])
  notificationEmailId String            @db.VarChar(36)
  topicEvent          TopicEvent        @relation(fields: [topicEventId], references: [id])
  topicEventId        String            @db.VarChar(36)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt()

  @@id([notificationEmailId, topicEventId])
  @@map("NotificationEmailTopicEvent")
}

model NotificationEmail {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text()
  sender      String  @db.Text()
  recipient   String  @db.Text()

  topicEvents NotificationEmailTopicEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("NotificationEmail")
}
